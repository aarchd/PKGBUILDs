From 394459a636aa975ce84e223d5a2f8e71df086d89 Mon Sep 17 00:00:00 2001
From: Erfan Abdi <erfangplus@gmail.com>
Date: Tue, 13 May 2025 11:50:24 +0530
Subject: [PATCH 2/2] libgbinder: Implement binder-wait

Signed-off-by: Deepak Meena <who53@disroot.org>
---
 debian/rules                   |   2 +
 rpm/libgbinder.spec            |   3 +
 test/Makefile                  |   1 +
 test/binder-wait/Makefile      | 154 +++++++++++++++++++++
 test/binder-wait/binder-wait.c | 241 +++++++++++++++++++++++++++++++++
 5 files changed, 401 insertions(+)
 create mode 100644 test/binder-wait/Makefile
 create mode 100644 test/binder-wait/binder-wait.c

diff --git a/debian/rules b/debian/rules
index 5930aad..47e5c4f 100755
--- a/debian/rules
+++ b/debian/rules
@@ -11,6 +11,7 @@ override_dh_auto_build:
 	dh_auto_build -- -C test/binder-bridge release
 	dh_auto_build -- -C test/binder-call release
 	dh_auto_build -- -C test/binder-list release
+	dh_auto_build -- -C test/binder-wait release
 	dh_auto_build -- -C test/binder-ping release
 
 override_dh_auto_install:
@@ -18,6 +19,7 @@ override_dh_auto_install:
 	dh_auto_install -- -C test/binder-bridge
 	dh_auto_install -- -C test/binder-call
 	dh_auto_install -- -C test/binder-list
+	dh_auto_install -- -C test/binder-wait
 	dh_auto_install -- -C test/binder-ping
 
 %:
diff --git a/rpm/libgbinder.spec b/rpm/libgbinder.spec
index 1ae35d9..138a5f0 100644
--- a/rpm/libgbinder.spec
+++ b/rpm/libgbinder.spec
@@ -46,6 +46,7 @@ This package contains the development library for %{name}.
 %make_build LIBDIR=%{_libdir} KEEP_SYMBOLS=1 release pkgconfig
 %make_build -C test/binder-bridge -j1 KEEP_SYMBOLS=1 release
 %make_build -C test/binder-list -j1 KEEP_SYMBOLS=1 release
+%make_build -C test/binder-wait -j1 KEEP_SYMBOLS=1 release
 %make_build -C test/binder-ping -j1 KEEP_SYMBOLS=1 release
 %make_build -C test/binder-call -j1 KEEP_SYMBOLS=1 release
 
@@ -53,6 +54,7 @@ This package contains the development library for %{name}.
 make LIBDIR=%{_libdir} DESTDIR=%{buildroot} install-dev
 make -C test/binder-bridge DESTDIR=%{buildroot} install
 make -C test/binder-list DESTDIR=%{buildroot} install
+make -C test/binder-wait DESTDIR=%{buildroot} install
 make -C test/binder-ping DESTDIR=%{buildroot} install
 make -C test/binder-call DESTDIR=%{buildroot} install
 
@@ -90,5 +92,6 @@ Binder command line utilities
 %defattr(-,root,root,-)
 %{_bindir}/binder-bridge
 %{_bindir}/binder-list
+%{_bindir}/binder-wait
 %{_bindir}/binder-ping
 %{_bindir}/binder-call
diff --git a/test/Makefile b/test/Makefile
index 7bb83f0..703041c 100644
--- a/test/Makefile
+++ b/test/Makefile
@@ -6,6 +6,7 @@ all:
 	@$(MAKE) -C binder-client $*
 	@$(MAKE) -C binder-dump $*
 	@$(MAKE) -C binder-list $*
+	@$(MAKE) -C binder-wait $*
 	@$(MAKE) -C binder-ping $*
 	@$(MAKE) -C binder-service $*
 	@$(MAKE) -C binder-call $*
diff --git a/test/binder-wait/Makefile b/test/binder-wait/Makefile
new file mode 100644
index 0000000..ca4a592
--- /dev/null
+++ b/test/binder-wait/Makefile
@@ -0,0 +1,154 @@
+# -*- Mode: makefile-gmake -*-
+
+.PHONY: all debug release clean cleaner
+.PHONY: libgbinder-release libgbinder-debug
+
+#
+# Required packages
+#
+
+PKGS = glib-2.0 gio-2.0 gio-unix-2.0 libglibutil
+
+#
+# Default target
+#
+
+all: debug release
+
+#
+# Executable
+#
+
+EXE = binder-wait
+
+#
+# Sources
+#
+
+SRC = $(EXE).c
+
+#
+# Directories
+#
+
+SRC_DIR = .
+BUILD_DIR = build
+LIB_DIR = ../..
+DEBUG_BUILD_DIR = $(BUILD_DIR)/debug
+RELEASE_BUILD_DIR = $(BUILD_DIR)/release
+
+#
+# Tools and flags
+#
+
+CC ?= $(CROSS_COMPILE)gcc
+LD = $(CC)
+WARNINGS = -Wall
+INCLUDES = -I$(LIB_DIR)/include
+BASE_FLAGS = -fPIC
+CFLAGS = $(BASE_FLAGS) $(DEFINES) $(WARNINGS) $(INCLUDES) -MMD -MP \
+  $(shell pkg-config --cflags $(PKGS))
+LDFLAGS = $(BASE_FLAGS) $(shell pkg-config --libs $(PKGS))
+QUIET_MAKE = make --no-print-directory
+DEBUG_FLAGS = -g
+RELEASE_FLAGS =
+
+ifndef KEEP_SYMBOLS
+KEEP_SYMBOLS = 0
+endif
+
+ifneq ($(KEEP_SYMBOLS),0)
+RELEASE_FLAGS += -g
+SUBMAKE_OPTS += KEEP_SYMBOLS=1
+endif
+
+DEBUG_LDFLAGS = $(LDFLAGS) $(DEBUG_FLAGS)
+RELEASE_LDFLAGS = $(LDFLAGS) $(RELEASE_FLAGS)
+DEBUG_CFLAGS = $(CFLAGS) $(DEBUG_FLAGS) -DDEBUG
+RELEASE_CFLAGS = $(CFLAGS) $(RELEASE_FLAGS) -O2
+
+#
+# Files
+#
+
+DEBUG_OBJS = $(SRC:%.c=$(DEBUG_BUILD_DIR)/%.o)
+RELEASE_OBJS = $(SRC:%.c=$(RELEASE_BUILD_DIR)/%.o)
+DEBUG_SO_FILE := $(shell $(QUIET_MAKE) -C $(LIB_DIR) print_debug_so)
+RELEASE_SO_FILE := $(shell $(QUIET_MAKE) -C $(LIB_DIR) print_release_so)
+DEBUG_LINK_FILE := $(shell $(QUIET_MAKE) -C $(LIB_DIR) print_debug_link)
+RELEASE_LINK_FILE := $(shell $(QUIET_MAKE) -C $(LIB_DIR) print_release_link)
+DEBUG_SO = $(LIB_DIR)/$(DEBUG_SO_FILE)
+RELEASE_SO = $(LIB_DIR)/$(RELEASE_SO_FILE)
+
+#
+# Dependencies
+#
+
+DEPS = $(DEBUG_OBJS:%.o=%.d) $(RELEASE_OBJS:%.o=%.d)
+ifneq ($(MAKECMDGOALS),clean)
+ifneq ($(strip $(DEPS)),)
+-include $(DEPS)
+endif
+endif
+
+$(DEBUG_OBJS): | $(DEBUG_BUILD_DIR)
+$(RELEASE_OBJS): | $(RELEASE_BUILD_DIR)
+
+#
+# Rules
+#
+
+DEBUG_EXE = $(DEBUG_BUILD_DIR)/$(EXE)
+RELEASE_EXE = $(RELEASE_BUILD_DIR)/$(EXE)
+
+debug: libgbinder-debug $(DEBUG_EXE)
+
+release: libgbinder-release $(RELEASE_EXE)
+
+clean:
+	rm -f *~
+	rm -fr $(BUILD_DIR)
+
+cleaner: clean
+	@make -C $(LIB_DIR) clean
+
+$(DEBUG_BUILD_DIR):
+	mkdir -p $@
+
+$(RELEASE_BUILD_DIR):
+	mkdir -p $@
+
+$(DEBUG_BUILD_DIR)/%.o : $(SRC_DIR)/%.c
+	$(CC) -c $(DEBUG_CFLAGS) -MT"$@" -MF"$(@:%.o=%.d)" $< -o $@
+
+$(RELEASE_BUILD_DIR)/%.o : $(SRC_DIR)/%.c
+	$(CC) -c $(RELEASE_CFLAGS) -MT"$@" -MF"$(@:%.o=%.d)" $< -o $@
+
+$(DEBUG_EXE): $(DEBUG_SO) $(DEBUG_BUILD_DIR) $(DEBUG_OBJS)
+	$(LD) $(DEBUG_OBJS) $(DEBUG_LDFLAGS) $< -o $@
+
+$(RELEASE_EXE): $(RELEASE_SO) $(RELEASE_BUILD_DIR) $(RELEASE_OBJS)
+	$(LD) $(RELEASE_OBJS) $(RELEASE_LDFLAGS) $< -o $@
+ifeq ($(KEEP_SYMBOLS),0)
+	strip $@
+endif
+
+libgbinder-debug:
+	@make $(SUBMAKE_OPTS) -C $(LIB_DIR) $(DEBUG_SO_FILE) $(DEBUG_LINK_FILE)
+
+libgbinder-release:
+	@make $(SUBMAKE_OPTS) -C $(LIB_DIR) $(RELEASE_SO_FILE) $(RELEASE_LINK_FILE)
+
+#
+# Install
+#
+
+INSTALL = install
+
+INSTALL_BIN_DIR = $(DESTDIR)/usr/bin
+
+install: release $(INSTALL_BIN_DIR)
+	$(INSTALL) -m 755 $(RELEASE_EXE) $(INSTALL_BIN_DIR)
+
+$(INSTALL_BIN_DIR):
+	$(INSTALL) -d $@
diff --git a/test/binder-wait/binder-wait.c b/test/binder-wait/binder-wait.c
new file mode 100644
index 0000000..45e7fb8
--- /dev/null
+++ b/test/binder-wait/binder-wait.c
@@ -0,0 +1,241 @@
+/*
+ * Copyright (C) 2018-2020 Jolla Ltd.
+ * Copyright (C) 2018-2020 Slava Monich <slava.monich@jolla.com>
+ * Copyright (C) 2023 Erfan Abdi <erfangplus@gmail.com>
+ *
+ * You may use this file under the terms of BSD license as follows:
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   1. Redistributions of source code must retain the above copyright
+ *      notice, this list of conditions and the following disclaimer.
+ *   2. Redistributions in binary form must reproduce the above copyright
+ *      notice, this list of conditions and the following disclaimer in the
+ *      documentation and/or other materials provided with the distribution.
+ *   3. Neither the names of the copyright holders nor the names of its
+ *      contributors may be used to endorse or promote products derived
+ *      from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <gbinder.h>
+
+#include <gutil_log.h>
+
+#define RET_OK          (0)
+#define RET_NOTFOUND    (1)
+#define RET_INVARG      (2)
+#define RET_ERR         (3)
+
+#define DEV_DEFAULT     GBINDER_DEFAULT_HWBINDER
+
+typedef struct app_options {
+    char* dev;
+    const char* service;
+} AppOptions;
+
+typedef struct app {
+    const AppOptions* opt;
+    GMainLoop* loop;
+    GBinderServiceManager* sm;
+    gulong wait_id;
+    int ret;
+} App;
+
+static const char pname[] = "binder-wait";
+
+static
+void
+app_print_strings(
+    char** strv)
+{
+    if (strv) {
+        while (*strv) {
+            printf("%s\n", *strv);
+            strv++;
+        }
+    }
+}
+
+static
+void
+app_registration_handler(
+    GBinderServiceManager* sm,
+    const char* name,
+    void* user_data)
+{
+    App* app = user_data;
+    const AppOptions* opt = app->opt;
+
+    GINFO("\"%s\" appeared", name);
+    if (!strcmp(name, opt->service)) {
+        gbinder_servicemanager_remove_handler(app->sm, app->wait_id);
+        app->wait_id = 0;
+        app->ret = RET_OK;
+        g_main_loop_quit(app->loop);
+    }
+}
+
+static
+void
+app_sync(
+   App* app)
+{
+    const AppOptions* opt = app->opt;
+    if (opt->service) {
+        int status = 0;
+        guint8 transport = 0;
+        if (!strcmp(GBINDER_DEFAULT_HWBINDER, opt->dev)) {
+            transport = gbinder_servicemanager_get_service_transport_sync
+                (app->sm, opt->service, &status);
+            if (transport == 0) {
+                GERR("No such service: %s (%d)", opt->service, status);
+                app->ret = RET_NOTFOUND;
+                return;
+            }
+        }
+
+        GBinderRemoteObject* obj = gbinder_servicemanager_get_service_sync
+            (app->sm, opt->service, &status);
+
+        if (obj) {
+            printf("%s\n", opt->service);
+            app->ret = RET_OK;
+        } else {
+            app->loop = g_main_loop_new(NULL, TRUE);
+
+            GINFO("Waiting for %s", opt->service);
+            app->wait_id = gbinder_servicemanager_add_registration_handler(app->sm,
+                opt->service, app_registration_handler, app);
+
+            g_main_loop_run(app->loop);
+            g_main_loop_unref(app->loop);
+            app->loop = NULL;
+        }
+    } else {
+        char** services = gbinder_servicemanager_list_sync(app->sm);
+
+        if (services) {
+            app_print_strings(services);
+            g_strfreev(services);
+            app->ret = RET_OK;
+        }
+    }
+}
+
+static
+gboolean
+app_log_verbose(
+    const gchar* name,
+    const gchar* value,
+    gpointer data,
+    GError** error)
+{
+    gutil_log_default.level = GLOG_LEVEL_VERBOSE;
+    return TRUE;
+}
+
+static
+gboolean
+app_log_quiet(
+    const gchar* name,
+    const gchar* value,
+    gpointer data,
+    GError** error)
+{
+    gutil_log_default.level = GLOG_LEVEL_ERR;
+    return TRUE;
+}
+
+static
+gboolean
+app_init(
+    AppOptions* opt,
+    int argc,
+    char* argv[])
+{
+    gboolean ok = FALSE;
+    GOptionEntry entries[] = {
+        { "verbose", 'v', G_OPTION_FLAG_NO_ARG, G_OPTION_ARG_CALLBACK,
+          app_log_verbose, "Enable verbose output", NULL },
+        { "quiet", 'q', G_OPTION_FLAG_NO_ARG, G_OPTION_ARG_CALLBACK,
+          app_log_quiet, "Be quiet", NULL },
+        { "device", 'd', 0, G_OPTION_ARG_STRING, &opt->dev,
+          "Binder device [" DEV_DEFAULT "]", "DEVICE" },
+        { NULL }
+    };
+
+    GError* error = NULL;
+    GOptionContext* options = g_option_context_new("[SERVICE]");
+
+    memset(opt, 0, sizeof(*opt));
+
+    gutil_log_timestamp = FALSE;
+    gutil_log_set_type(GLOG_TYPE_STDERR, pname);
+    gutil_log_default.level = GLOG_LEVEL_DEFAULT;
+
+    g_option_context_add_main_entries(options, entries, NULL);
+    if (g_option_context_parse(options, &argc, &argv, &error)) {
+        char* help;
+
+        if (!opt->dev || !opt->dev[0]) opt->dev = g_strdup(DEV_DEFAULT);
+        switch (argc) {
+        case 2:
+            opt->service = argv[1];
+            /* no break */
+        case 1:
+            ok = TRUE;
+            break;
+        default:
+            help = g_option_context_get_help(options, TRUE, NULL);
+            fprintf(stderr, "%s", help);
+            g_free(help);
+            break;
+        }
+    } else {
+        GERR("%s", error->message);
+        g_error_free(error);
+    }
+    g_option_context_free(options);
+    return ok;
+}
+
+int main(int argc, char* argv[])
+{
+    App app;
+    AppOptions opt;
+
+    memset(&app, 0, sizeof(app));
+    app.ret = RET_INVARG;
+    app.opt = &opt;
+    if (app_init(&opt, argc, argv)) {
+        app.sm = gbinder_servicemanager_new(opt.dev);
+        if (gbinder_servicemanager_wait(app.sm, -1)) {
+            app_sync(&app);
+            gbinder_servicemanager_unref(app.sm);
+        }
+    }
+    g_free(opt.dev);
+    return app.ret;
+}
+
+/*
+ * Local Variables:
+ * mode: C
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
-- 
2.49.0

